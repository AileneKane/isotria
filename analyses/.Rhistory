mean.dV[g]~dunif(0,1)# Priors for mean group-specific dormancy for veg plants
mu.dV[g]<-log(mean.dV[g]/(1-mean.dV[g]))
mean.dF[g]~dunif(0,1)# Priors for mean group-specific dormancy for rep plants
mu.dF[g]<-log(mean.dF[g]/(1-mean.dF[g]))
mean.dUV[g]~dunif(0,1)# Priors for mean group-specific dormancy for dorm (prev veg) plants
mu.dUV[g]<-log(mean.dUV[g]/(1-mean.dUV[g]))
mean.dUF[g]~dunif(0,1)# Priors for mean group-specific dormancy for dorm (prev rep) plants
mu.dUF[g]<-log(mean.dUF[g]/(1-mean.dUV[g]))
sigma.sV[g]~dunif(0,10)#temporal variance for veg plants survival
tau.sV[g]<-pow(sigma.sV[g],-2)
sigma.sV2[g]<-pow(sigma.sV[g],2)
sigma.sF[g]~dunif(0,10)#temporal variance for rep plants survival
tau.sF[g]<-pow(sigma.sF[g],-2)
sigma.sF2[g]<-pow(sigma.sF[g],2)
sigma.sUV[g]~dunif(0,10)#temporal variance for dorm plants survival
tau.sUV[g]<-pow(sigma.sUV[g],-2)
sigma.sUV2[g]<-pow(sigma.sUV[g],2)
sigma.sUF[g]~dunif(0,10)#temporal variance for dorm plants survival
tau.sUF[g]<-pow(sigma.sUF[g],-2)
sigma.sUF2[g]<-pow(sigma.sUF[g],2)
sigma.fV[g]~dunif(0,10)#temporal variance for prob of rep
tau.fV[g]<-pow(sigma.fV[g],-2)
sigma.fV2[g]<-pow(sigma.fV[g],2)
sigma.fF[g]~dunif(0,10)#
tau.fF[g]<-pow(sigma.fF[g],-2)
sigma.fF2[g]<-pow(sigma.fF[g],2)
sigma.fUV[g]~dunif(0,10)
tau.fUV[g]<-pow(sigma.fUV[g],-2)
sigma.fUV2[g]<-pow(sigma.fUV[g],2)
sigma.fUF[g]~dunif(0,10)
tau.fUF[g]<-pow(sigma.fUF[g],-2)
sigma.fUF2[g]<-pow(sigma.fUF[g],2)
sigma.dV[g]~dunif(0,10)#temporal variance of dormancy for veg plants
tau.dV[g]<-pow(sigma.dV[g],-2)
sigma.dV2[g]<-pow(sigma.dV[g],2)
sigma.dF[g]~dunif(0,10)#temporal variance of dormancy for rep plants
tau.dF[g]<-pow(sigma.dF[g],-2)
sigma.dF2[g]<-pow(sigma.dF[g],2)
sigma.dUV[g]~dunif(0,10)#temporal variance of dormancy for dormant plants
tau.dUV[g]<-pow(sigma.dUV[g],-2)
sigma.dUV2[g]<-pow(sigma.dUV[g],2)
sigma.dUF[g]~dunif(0,10)#temporal variance of dormancy for dormant plants
tau.dUF[g]<-pow(sigma.dUF[g],-2)
sigma.dUF2[g]<-pow(sigma.dUF[g],2)
beta.sV[g]~dnorm(0,0.001)I(-10,10)
beta.sF[g]~dnorm(0,0.001)I(-10,10)
beta.sUV[g]~dnorm(0,0.001)I(-10,10)
beta.sUF[g]~dnorm(0,0.001)I(-10,10)
beta.fV[g]~dnorm(0,0.001)I(-10,10)
beta.fF[g]~dnorm(0,0.001)I(-10,10)
beta.fUV[g]~dnorm(0,0.001)I(-10,10)
beta.fUF[g]~dnorm(0,0.001)I(-10,10)
beta.dV[g]~dnorm(0,0.001)I(-10,10)
beta.dF[g]~dnorm(0,0.001)I(-10,10)
beta.dUV[g]~dnorm(0,0.001)I(-10,10)
beta.dUF[g]~dnorm(0,0.001)I(-10,10)
beta1.sV[g]~dnorm(0,0.001)I(-10,10)
beta1.sF[g]~dnorm(0,0.001)I(-10,10)
beta1.sUV[g]~dnorm(0,0.001)I(-10,10)
beta1.sUF[g]~dnorm(0,0.001)I(-10,10)
beta1.fV[g]~dnorm(0,0.001)I(-10,10)
beta1.fF[g]~dnorm(0,0.001)I(-10,10)
beta1.fUV[g]~dnorm(0,0.001)I(-10,10)
beta1.fUF[g]~dnorm(0,0.001)I(-10,10)
beta1.dV[g]~dnorm(0,0.001)I(-10,10)
beta1.dF[g]~dnorm(0,0.001)I(-10,10)
beta1.dUV[g]~dnorm(0,0.001)I(-10,10)
beta1.dUF[g]~dnorm(0,0.001)I(-10,10)
#calculate probabilities of 2 different groups and 2 different time periods (=4 group-time periods) to look at later...
#survival
logit(sV0[g])<- mu.sV[g]
logit(sV1[g])<- mu.sV[g] + beta.sV[g]
logit(sF0[g])<- mu.sF[g]
logit(sF1[g])<- mu.sF[g] + beta.sF[g]
logit(sUV0[g])<- mu.sUV[g]
logit(sUV1[g])<- mu.sUV[g] + beta.sUV[g]
logit(sUF0[g])<- mu.sUF[g]
logit(sUF1[g])<- mu.sUF[g] + beta.sUF[g]
#reproduction
logit(fV0[g])<- mu.fV[g]
logit(fV1[g])<- mu.fV[g] + beta.fV[g]
logit(fF0[g])<- mu.fF[g]
logit(fF1[g])<- mu.fF[g] + beta.fF[g]
logit(fUV0[g])<- mu.fUV[g]
logit(fUV1[g])<- mu.fUV[g] + beta.fUV[g]
logit(fUF0[g])<- mu.fUF[g]
logit(fUF1[g])<- mu.fUF[g] + beta.fUF[g]
#dormancy
logit(dV0[g])<- mu.dV[g]
logit(dV1[g])<- mu.dV[g] + beta.dV[g]
logit(dF0[g])<- mu.dF[g]
logit(dF1[g])<- mu.dF[g] + beta.dF[g]
logit(dUV0[g])<- mu.dUV[g]
logit(dUV1[g])<- mu.dUV[g] + beta.dUV[g]
logit(dUF0[g])<- mu.dUF[g]
logit(dUF1[g])<- mu.dUF[g] + beta.dUF[g]
}#g
# Define state-transition and observation matrices
for (i in 1:nind){
# Define probabilities of state S(t+1) given S(t)
for (t in f[i]:(n.occasions-1)){
ps[1,i,t,1] <- sV[i,t] * (1-fV[i,t])*(1-dV[i,t])
ps[1,i,t,2] <- sV[i,t] * fV[i,t]*(1-dV[i,t])
ps[1,i,t,3] <- sV[i,t]*dV[i,t]
ps[1,i,t,4] <- 0
ps[1,i,t,5] <- 1-sV[i,t]
ps[2,i,t,1] <- sF[i,t] * (1-fF[i,t])*(1-dF[i,t])
ps[2,i,t,2] <- sF[i,t] * fF[i,t]*(1-dF[i,t])
ps[2,i,t,3] <- 0
ps[2,i,t,4] <- sF[i,t]*dF[i,t]
ps[2,i,t,5] <- 1-sF[i,t]
ps[3,i,t,1] <- sUV[i,t] * (1-fUV[i,t])*(1-dUV[i,t])
ps[3,i,t,2] <- sUV[i,t] * fUV[i,t]*(1-dUV[i,t])
ps[3,i,t,3] <- sUV[i,t]* dUV[i,t]
ps[3,i,t,4] <- 0
ps[3,i,t,5] <- 1-sUV[i,t]
ps[4,i,t,1] <- sUF[i,t] * (1-fUF[i,t])*(1-dUF[i,t])
ps[4,i,t,2] <- sUF[i,t] * fUF[i,t]*(1-dUF[i,t])
ps[4,i,t,3] <- 0
ps[4,i,t,4] <- sUF[i,t]* dUF[i,t]
ps[4,i,t,5] <- 1-sUF[i,t]
ps[5,i,t,1] <- 0
ps[5,i,t,2] <- 0
ps[5,i,t,3] <- 0
ps[5,i,t,4] <- 0
ps[5,i,t,5] <- 1
# Define probabilities of O(t) given S(t) ##first column is observed state, last is true state
po[1,i,t,1] <- 1
po[1,i,t,2] <- 0
po[1,i,t,3] <-0
po[2,i,t,1] <- 0
po[2,i,t,2] <- 1
po[2,i,t,3] <- 0
po[3,i,t,1] <- 0
po[3,i,t,2] <- 0
po[3,i,t,3] <- 1
po[4,i,t,1] <- 0
po[4,i,t,2] <- 0
po[4,i,t,3] <- 1
po[5,i,t,1] <- 0
po[5,i,t,2] <- 0
po[5,i,t,3] <- 1
} #t
} #i
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- y[i,f[i]]
for (t in (f[i]+1):n.occasions){
# State process: draw S(t) given S(t-1)
z[i,t] ~ dcat(ps[z[i,t-1], i, t-1,])
# Observation process: draw O(t) given S(t)
y[i,t] ~ dcat(po[z[i,t], i, t-1,])
} #t
} #i
}
",fill = TRUE)
sink()
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[20:21,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[23,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[23:24,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[23:25,2]<-NA
zst1
zst1
g
6
6+12
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27,2]<-NA
zst2
zst1
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:28,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:29,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:30,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:31,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:32,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[27:33,2]<-NA
#complex model
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[46,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[58,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
i=1
n1 <- min(which(ch[i,]<3))#
states <- max(ch, na.rm = TRUE)
known.states <- 1:(states-2)
v <- which(ch<=states)#which occurences are unknown states (=3 and 4)
v
v
v
=3+7
3+7
ch[-v] <- NA#everyhing else besides the 3 and 4s gets an NA
3+7
ch[v] <- sample(known.states, length(v), replace = TRUE)##gives all unseen occurrences (3s) a starting value that is a random sampling of either 1 or 2
source('~/git/isotria/analyses/isotria_4stagemultistate.R', echo=TRUE)
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
sink("ms-ranef4stages.jags")
cat("
model {
# -------------------------------------------------
# Parameters:
# sV: survival probability for nonreproductive plants
# sF: survival probability for reproductive plants
# sUV: survival probability for dormant plants that were vegetative above ground
# sUF: survival probability for dormant plants that were reproductive above ground
# fV: reproduction probability for vegetative plants
# fF: reproduction probability for reproductive plants
# fUV: reproduction probability for dormant plants that were vegetative above ground
# fUF: reproduction probability for dormant plants that were reproductive above ground
# dV: dormancy probability for nonreproductive plants
# dF: dormancy probability for reproductive plants
# dUV: dormancy probability for dormant plants that were vegetative above ground
# dUF: dormancy probability for dormant plants that were reproductive above ground
# -------------------------------------------------
# States (S):
# 1 vegetative
# 2 reproductive
# 3 dormant, previously vegetative
# 4 dormant, previously reproductive
# 5 dead
# Observations (O):
# 1 seen vegetative
# 2 seen reproductive
# 3 not seen
# 4 not seen
# -------------------------------------------------
# Model, priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
logit(sV[i,t]) <- eta.sV[group[i],t]
logit(sF[i,t]) <- eta.sF[group[i],t]
logit(sUV[i,t]) <- eta.sUV[group[i],t]
logit(sUF[i,t]) <- eta.sUF[group[i],t]
logit(fV[i,t]) <- eta.fV[group[i],t]
logit(fF[i,t]) <- eta.fF[group[i],t]
logit(fUV[i,t]) <- eta.fUV[group[i],t]
logit(fUF[i,t]) <- eta.fUF[group[i],t]
logit(dV[i,t]) <- eta.dV[group[i],t]
logit(dF[i,t]) <- eta.dF[group[i],t]
logit(dUV[i,t]) <- eta.dUV[group[i],t]
logit(dUF[i,t]) <- eta.dUF[group[i],t]
}#t
}#i
for (g in 1:2){#group
for (t in 1:(n.occasions-1)){
eta.sV[g,t]  <-mu.sV[g]+beta.sV[g]*x[g,t]+beta1.sV[g]*x1[g,t]+epsilon.sV[g,t]
eta.sF[g,t]  <-mu.sF[g]+beta.sF[g]*x[g,t]+beta1.sF[g]*x1[g,t]+epsilon.sF[g,t]
eta.sUV[g,t]  <-mu.sUV[g]+beta.sUV[g]*x[g,t]+beta1.sUV[g]*x1[g,t]+epsilon.sUV[g,t]
eta.sUF[g,t]  <-mu.sUF[g]+beta.sUF[g]*x[g,t]+beta1.sUF[g]*x1[g,t]+epsilon.sUF[g,t]
eta.fV[g,t]  <-mu.fV[g]+beta.fV[g]*x[g,t]+beta1.fV[g]*x1[g,t]+epsilon.fV[g,t]
eta.fF[g,t]  <-mu.fF[g]+beta.fF[g]*x[g,t]+beta1.fF[g]*x1[g,t]+epsilon.fF[g,t]
eta.fUV[g,t]  <-mu.fUV[g]+beta.fUV[g]*x[g,t]+beta1.fUV[g]*x1[g,t]+epsilon.fUV[g,t]
eta.fUF[g,t]  <-mu.fUF[g]+beta.fUF[g]*x[g,t]+beta1.fUF[g]*x1[g,t]+epsilon.fUF[g,t]
eta.dV[g,t]  <-mu.dV[g]+beta.dV[g]*x[g,t]+beta1.dV[g]*x1[g,t]+epsilon.dV[g,t]
eta.dF[g,t]  <-mu.dF[g]+beta.dF[g]*x[g,t]+beta1.dF[g]*x1[g,t]+epsilon.dF[g,t]
eta.dUV[g,t]  <-mu.dUV[g]+beta.dUV[g]*x[g,t]+beta1.dUV[g]*x1[g,t]+epsilon.dUV[g,t]
eta.dUF[g,t]  <-mu.dUF[g]+beta.dUF[g]*x[g,t]+beta1.dUF[g]*x1[g,t]+epsilon.dUF[g,t]
epsilon.sV[g,t]~dnorm(0,tau.sV[g])#could move all the mean stuff to this part, might help model mix better? hierarchical centering
epsilon.sF[g,t]~dnorm(0,tau.sF[g])
epsilon.sUV[g,t]~dnorm(0,tau.sUV[g])
epsilon.sUF[g,t]~dnorm(0,tau.sUF[g])
epsilon.fV[g,t]~dnorm(0,tau.fV[g])
epsilon.fF[g,t]~dnorm(0,tau.fF[g])
epsilon.fUV[g,t]~dnorm(0,tau.fUV[g])
epsilon.fUF[g,t]~dnorm(0,tau.fUF[g])
epsilon.dV[g,t]~dnorm(0,tau.dV[g])
epsilon.dF[g,t]~dnorm(0,tau.dF[g])
epsilon.dUV[g,t]~dnorm(0,tau.dUV[g])
epsilon.dUF[g,t]~dnorm(0,tau.dUF[g])
}#t
mean.sV[g]~dunif(0,1)# Priors for mean group-specific survival for veg plants
mu.sV[g]<-log(mean.sV[g]/(1-mean.sV[g]))
mean.sF[g]~dunif(0,1)# Priors for mean group-specific survivalsurvival for rep plants
mu.sF[g]<-log(mean.sF[g]/(1-mean.sF[g]))
mean.sUV[g]~dunif(0,1)# Priors for mean group-specific survival for dorm(prev veg) plants
mu.sUV[g]<-log(mean.sUV[g]/(1-mean.sUV[g]))
mean.sUF[g]~dunif(0,1)# Priors for mean group-specific survival dorm (prev rep) plants
mu.sUF[g]<-log(mean.sUF[g]/(1-mean.sUF[g]))
mean.fV[g]~dunif(0,1)# Priors for mean group-specific prob of rep for veg plants
mu.fV[g]<-log(mean.fV[g]/(1-mean.fV[g]))
mean.fF[g]~dunif(0,1)# Priors for mean group-specific prob of rep for rep plants
mu.fF[g]<-log(mean.fF[g]/(1-mean.fF[g]))
mean.fUV[g]~dunif(0,1)# Priors for mean group-specific prob of rep for dorm (prev veg) plants
mu.fUV[g]<-log(mean.fUV[g]/(1-mean.fUV[g]))
mean.fUF[g]~dunif(0,1)# Priors for mean group-specific prob of rep for dorm (prev rep) plants
mu.fUF[g]<-log(mean.fUF[g]/(1-mean.fUF[g]))
mean.dV[g]~dunif(0,1)# Priors for mean group-specific dormancy for veg plants
mu.dV[g]<-log(mean.dV[g]/(1-mean.dV[g]))
mean.dF[g]~dunif(0,1)# Priors for mean group-specific dormancy for rep plants
mu.dF[g]<-log(mean.dF[g]/(1-mean.dF[g]))
mean.dUV[g]~dunif(0,1)# Priors for mean group-specific dormancy for dorm (prev veg) plants
mu.dUV[g]<-log(mean.dUV[g]/(1-mean.dUV[g]))
mean.dUF[g]~dunif(0,1)# Priors for mean group-specific dormancy for dorm (prev rep) plants
mu.dUF[g]<-log(mean.dUF[g]/(1-mean.dUV[g]))
sigma.sV[g]~dunif(0,10)#temporal variance for veg plants survival
tau.sV[g]<-pow(sigma.sV[g],-2)
sigma.sV2[g]<-pow(sigma.sV[g],2)
sigma.sF[g]~dunif(0,10)#temporal variance for rep plants survival
tau.sF[g]<-pow(sigma.sF[g],-2)
sigma.sF2[g]<-pow(sigma.sF[g],2)
sigma.sUV[g]~dunif(0,10)#temporal variance for dorm plants survival
tau.sUV[g]<-pow(sigma.sUV[g],-2)
sigma.sUV2[g]<-pow(sigma.sUV[g],2)
sigma.sUF[g]~dunif(0,10)#temporal variance for dorm plants survival
tau.sUF[g]<-pow(sigma.sUF[g],-2)
sigma.sUF2[g]<-pow(sigma.sUF[g],2)
sigma.fV[g]~dunif(0,10)#temporal variance for prob of rep
tau.fV[g]<-pow(sigma.fV[g],-2)
sigma.fV2[g]<-pow(sigma.fV[g],2)
sigma.fF[g]~dunif(0,10)#
tau.fF[g]<-pow(sigma.fF[g],-2)
sigma.fF2[g]<-pow(sigma.fF[g],2)
sigma.fUV[g]~dunif(0,10)
tau.fUV[g]<-pow(sigma.fUV[g],-2)
sigma.fUV2[g]<-pow(sigma.fUV[g],2)
sigma.fUF[g]~dunif(0,10)
tau.fUF[g]<-pow(sigma.fUF[g],-2)
sigma.fUF2[g]<-pow(sigma.fUF[g],2)
sigma.dV[g]~dunif(0,10)#temporal variance of dormancy for veg plants
tau.dV[g]<-pow(sigma.dV[g],-2)
sigma.dV2[g]<-pow(sigma.dV[g],2)
sigma.dF[g]~dunif(0,10)#temporal variance of dormancy for rep plants
tau.dF[g]<-pow(sigma.dF[g],-2)
sigma.dF2[g]<-pow(sigma.dF[g],2)
sigma.dUV[g]~dunif(0,10)#temporal variance of dormancy for dormant plants
tau.dUV[g]<-pow(sigma.dUV[g],-2)
sigma.dUV2[g]<-pow(sigma.dUV[g],2)
sigma.dUF[g]~dunif(0,10)#temporal variance of dormancy for dormant plants
tau.dUF[g]<-pow(sigma.dUF[g],-2)
sigma.dUF2[g]<-pow(sigma.dUF[g],2)
beta.sV[g]~dnorm(0,0.001)I(-10,10)
beta.sF[g]~dnorm(0,0.001)I(-10,10)
beta.sUV[g]~dnorm(0,0.001)I(-10,10)
beta.sUF[g]~dnorm(0,0.001)I(-10,10)
beta.fV[g]~dnorm(0,0.001)I(-10,10)
beta.fF[g]~dnorm(0,0.001)I(-10,10)
beta.fUV[g]~dnorm(0,0.001)I(-10,10)
beta.fUF[g]~dnorm(0,0.001)I(-10,10)
beta.dV[g]~dnorm(0,0.001)I(-10,10)
beta.dF[g]~dnorm(0,0.001)I(-10,10)
beta.dUV[g]~dnorm(0,0.001)I(-10,10)
beta.dUF[g]~dnorm(0,0.001)I(-10,10)
beta1.sV[g]~dnorm(0,0.001)I(-10,10)
beta1.sF[g]~dnorm(0,0.001)I(-10,10)
beta1.sUV[g]~dnorm(0,0.001)I(-10,10)
beta1.sUF[g]~dnorm(0,0.001)I(-10,10)
beta1.fV[g]~dnorm(0,0.001)I(-10,10)
beta1.fF[g]~dnorm(0,0.001)I(-10,10)
beta1.fUV[g]~dnorm(0,0.001)I(-10,10)
beta1.fUF[g]~dnorm(0,0.001)I(-10,10)
beta1.dV[g]~dnorm(0,0.001)I(-10,10)
beta1.dF[g]~dnorm(0,0.001)I(-10,10)
beta1.dUV[g]~dnorm(0,0.001)I(-10,10)
beta1.dUF[g]~dnorm(0,0.001)I(-10,10)
#calculate probabilities of 2 different groups and 2 different time periods (=4 group-time periods) to look at later...
#survival
logit(sV0[g])<- mu.sV[g]
logit(sV1[g])<- mu.sV[g] + beta.sV[g]
logit(sF0[g])<- mu.sF[g]
logit(sF1[g])<- mu.sF[g] + beta.sF[g]
logit(sUV0[g])<- mu.sUV[g]
logit(sUV1[g])<- mu.sUV[g] + beta.sUV[g]
logit(sUF0[g])<- mu.sUF[g]
logit(sUF1[g])<- mu.sUF[g] + beta.sUF[g]
#reproduction
logit(fV0[g])<- mu.fV[g]
logit(fV1[g])<- mu.fV[g] + beta.fV[g]
logit(fF0[g])<- mu.fF[g]
logit(fF1[g])<- mu.fF[g] + beta.fF[g]
logit(fUV0[g])<- mu.fUV[g]
logit(fUV1[g])<- mu.fUV[g] + beta.fUV[g]
logit(fUF0[g])<- mu.fUF[g]
logit(fUF1[g])<- mu.fUF[g] + beta.fUF[g]
#dormancy
logit(dV0[g])<- mu.dV[g]
logit(dV1[g])<- mu.dV[g] + beta.dV[g]
logit(dF0[g])<- mu.dF[g]
logit(dF1[g])<- mu.dF[g] + beta.dF[g]
logit(dUV0[g])<- mu.dUV[g]
logit(dUV1[g])<- mu.dUV[g] + beta.dUV[g]
logit(dUF0[g])<- mu.dUF[g]
logit(dUF1[g])<- mu.dUF[g] + beta.dUF[g]
}#g
# Define state-transition and observation matrices
for (i in 1:nind){
# Define probabilities of state S(t+1) given S(t)
for (t in f[i]:(n.occasions-1)){
ps[1,i,t,1] <- sV[i,t] * (1-fV[i,t])*(1-dV[i,t])
ps[1,i,t,2] <- sV[i,t] * fV[i,t]*(1-dV[i,t])
ps[1,i,t,3] <- sV[i,t]*dV[i,t]
ps[1,i,t,4] <- 0
ps[1,i,t,5] <- 1-sV[i,t]
ps[2,i,t,1] <- sF[i,t] * (1-fF[i,t])*(1-dF[i,t])
ps[2,i,t,2] <- sF[i,t] * fF[i,t]*(1-dF[i,t])
ps[2,i,t,3] <- 0
ps[2,i,t,4] <- sF[i,t]*dF[i,t]
ps[2,i,t,5] <- 1-sF[i,t]
ps[3,i,t,1] <- sUV[i,t] * (1-fUV[i,t])*(1-dUV[i,t])
ps[3,i,t,2] <- sUV[i,t] * fUV[i,t]*(1-dUV[i,t])
ps[3,i,t,3] <- sUV[i,t]* dUV[i,t]
ps[3,i,t,4] <- 0
ps[3,i,t,5] <- 1-sUV[i,t]
ps[4,i,t,1] <- sUF[i,t] * (1-fUF[i,t])*(1-dUF[i,t])
ps[4,i,t,2] <- sUF[i,t] * fUF[i,t]*(1-dUF[i,t])
ps[4,i,t,3] <- 0
ps[4,i,t,4] <- sUF[i,t]* dUF[i,t]
ps[4,i,t,5] <- 1-sUF[i,t]
ps[5,i,t,1] <- 0
ps[5,i,t,2] <- 0
ps[5,i,t,3] <- 0
ps[5,i,t,4] <- 0
ps[5,i,t,5] <- 1
# Define probabilities of O(t) given S(t) ##first column is observed state, last is true state
po[1,i,t,1] <- 1
po[1,i,t,2] <- 0
po[1,i,t,3] <-0
po[2,i,t,1] <- 0
po[2,i,t,2] <- 1
po[2,i,t,3] <- 0
po[3,i,t,1] <- 0
po[3,i,t,2] <- 0
po[3,i,t,3] <- 1
po[4,i,t,1] <- 0
po[4,i,t,2] <- 0
po[4,i,t,3] <- 1
po[5,i,t,1] <- 0
po[5,i,t,2] <- 0
po[5,i,t,3] <- 1
} #t
} #i
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- y[i,f[i]]
for (t in (f[i]+1):n.occasions){
# State process: draw S(t) given S(t-1)
z[i,t] ~ dcat(ps[z[i,t-1], i, t-1,])
# Observation process: draw O(t) given S(t)
y[i,t] ~ dcat(po[z[i,t], i, t-1,])
} #t
} #i
}
",fill = TRUE)
sink()
#Function to create known latent state z
########
known.state.ms <- function(ch){##removes 3s and 4s and replaces them with NAs, and replaces first observation with NA
state <- ch
for (i in 1:dim(ch)[1]){
n1 <- min(which(ch[i,]<3))#
state[i,n1] <- NA
}
state[state==3] <- NA
state[state==4] <- NA
return(state)
}
ms.init.z <- function(ch, f){#ms.init.z gives starting values of 1 or 2 to all unknown states
for (i in 1:dim(ch)[1]){ch[i,1:f[i]] <- NA}
n1 <- min(which(ch[i,]<3))#
states <- max(ch, na.rm = TRUE)
known.states <- 1:(states-2)
v <- which(ch<=states)#which occurences are unknown states (=3 and 4)
ch[-v] <- NA#everyhing else besides the 3 and 4s gets an NA
ch[v] <- sample(known.states, length(v), replace = TRUE)##gives all unseen occurrences (3s) a starting value that is a random sampling of either 1 or 2
#ch[i,n1] <- NA#make first observance an NA (ot a 3)
return(ch)
}
ch=isoall_CH.ms
y = isoall_CH.ms
#y[73,24]=NA
zst1=ms.init.z(ch,f)
#fixes necessary to get model to run with zst1:
zst1[20:21,2]<-NA
zst1[23:25,2]<-NA
zst1[27:33,2]<-NA
zst1[46,2]<-NA
zst1[58,2]<-NA
#zst1[60,31]<-NA
#zst1[73,25:26]<-NA
#zst1[119,21:31]<-NA
# Bundle data
jags.data <- list(y = isoall_CH.ms, f = f, n.occasions = dim(isoall_CH.ms)[2], nind = dim(isoall_CH.ms)[1], z = known.state.ms(isoall_CH.ms), group=group, x=time_log, x1=logged_yrs2)
# Initial values
inits<-function(){list(mean.sV=c(.5,.5), mean.sF=c(.5,.5),mean.sUV=c(.5,.5),mean.sUF=c(.5,.5),mean.fV=c(.5,.5),mean.fF=c(.5,.5),mean.fUV=c(.5,.5),mean.fUF=c(.5,.5),mean.dV=c(.5,.5),mean.dF=c(.5,.5),mean.dUV=c(.5,.5),mean.dUF=c(.5,.5),sigma.sV=c(1,1),sigma.sF=c(1,1),sigma.sUV=c(1,1),sigma.sUF=c(1,1),sigma.fV=c(1,1),sigma.fF=c(1,1),sigma.fUV=c(1,1),sigma.fUF=c(1,1),sigma.dV=c(1,1),sigma.dF=c(1,1),sigma.dUV=c(1,1),sigma.dUF=c(1,1),z = zst1)}
# Parameters monitored
parameters <- c("mean.sV","mean.sF","mean.sUV","mean.sUF", "mean.fV","mean.fF","mean.fUV","mean.fUF","mean.dV","mean.dF","mean.dUV","mean.dUF","beta.sV","beta.sF", "beta.sUV","beta.sUF","beta.fV","beta.fF","beta.fUV","beta.fUF","beta.dV", "beta.dF", "beta.dUV","beta.dUF","sV0","sV1","sF0","sF1","sUV0","sUF0","sUV1","sUF1","fV0","fV1","fF0","fF1","fUV0","fUV1","fUF0","fUF1","dV0","dV1","dF0","dF1","dUV0","dUF0","dUV1","dUF1","beta1.sV","beta1.sF","beta1.sUV","beta1.sUF","beta1.fV","beta1.fF","beta1.fUV","beta1.fUF","beta1.dV", "beta1.dF","beta1.dUV","beta1.dUF","mu.sV","mu.sF","mu.sUV","mu.sUF","mu.fV","mu.fF","mu.fUV","mu.fUF","mu.dV","mu.dF","mu.dUV","mu.dUF","sigma.sV2","sigma.sF2","sigma.sUV2","sigma.sUF2","sigma.fV2","sigma.fF2","sigma.fUV2","sigma.fUF2","sigma.dV2","sigma.dF2","sigma.dUV2","sigma.dUF2")
# MCMC settings
ni <- 2500
nt <- 3
nb <- 500
nc <- 3
# Call JAGS from R #
#complex model
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
zst1[58:59,2]<-NA
ms4.rf <- jags(jags.data, inits, parameters, "ms-ranef4stages.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
n1 <- min(which(ch[i,]<3))#
ch
ch=isoall_CH.ms
isoall_CH.ms
